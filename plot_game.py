import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import json

class Game:
    def __init__(self, root):
        self.root = root
        self.root.title("–ì—Ä–∞")
        self.root.geometry("500x500")
        self.root.configure(bg="#2E3440")  # –¢–µ–º–Ω–∏–π —Ñ–æ–Ω

        self.data = {}
        self.character = {}
        self.current_scene = None
        self.player_name = ""

        self.create_styles()
        self.create_ui()

    def create_styles(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∏–ª—é —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
        style = ttk.Style()
        style.configure("TButton", font=("Arial", 12), padding=6)
        style.configure("TLabel", font=("Arial", 12), background="#2E3440", foreground="white", wraplength=450)
        style.configure("Header.TLabel", font=("Arial", 14, "bold"), background="#2E3440", foreground="white")

    def create_ui(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ—á–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
        ttk.Button(self.root, text="–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å—Ü–µ–Ω–∞—Ä—ñ–π", command=self.load_scenario).pack(pady=10)

        self.name_frame = ttk.Frame(self.root, style="TFrame")
        self.name_frame.pack()
        ttk.Label(self.name_frame, text="–í–∞—à–µ —ñ–º'—è:", style="Header.TLabel").pack(side="left", padx=5)
        self.name_var = tk.StringVar()
        self.name_entry = ttk.Entry(self.name_frame, textvariable=self.name_var, font=("Arial", 12), width=15)
        self.name_entry.pack(side="left")
        ttk.Button(self.name_frame, text="–ü–æ—á–∞—Ç–∏ –≥—Ä—É", command=self.start_game).pack(side="left", padx=5)

        self.text_label = ttk.Label(self.root, text="", justify="left", wraplength=450, font=("Arial", 12))
        self.text_label.pack(pady=15)

        self.choices_frame = ttk.Frame(self.root, style="TFrame")
        self.choices_frame.pack()

        self.character_label = ttk.Label(self.root, text="", font=("Arial", 12, "italic"), foreground="#A3BE8C")
        self.character_label.pack(pady=10)

    def load_scenario(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ü–µ–Ω–∞—Ä—ñ—é –≥—Ä–∏"""
        filename = filedialog.askopenfilename(filetypes=[("JSON —Ñ–∞–π–ª–∏", "*.json")])
        if not filename:
            return
        with open(filename, "r", encoding="utf-8") as f:
            self.data = json.load(f)
        self.character = self.data.get("character", {}).copy()  # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–ø—ñ—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", "–°—Ü–µ–Ω–∞—Ä—ñ–π –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!")

    def start_game(self):
        """–ó–∞–ø—É—Å–∫ –≥—Ä–∏"""
        name = self.name_var.get().strip()
        if not name:
            messagebox.showwarning("–ü–æ–º–∏–ª–∫–∞", "–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!")
            return

        self.player_name = name  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–º'—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        self.current_scene = list(self.data.get("scenes", {}).keys())[0]
        self.name_entry.config(state="disabled")  # –ë–ª–æ–∫—É—î–º–æ –ø–æ–ª–µ —ñ–º–µ–Ω—ñ –ø—ñ—Å–ª—è —Å—Ç–∞—Ä—Ç—É –≥—Ä–∏
        self.update_scene()

    def update_scene(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ü–µ–Ω–∏"""
        if not self.current_scene or self.current_scene not in self.data["scenes"]:
            return
        scene = self.data["scenes"][self.current_scene]

        # –ê–Ω—ñ–º–∞—Ü—ñ—è –ø–æ—Å—Ç—É–ø–æ–≤–æ–≥–æ –≤–∏–≤–µ–¥–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
        self.animate_text(scene["text"])

        for widget in self.choices_frame.winfo_children():
            widget.destroy()

        if not scene["choices"]:  # –Ø–∫—â–æ –Ω–µ–º–∞—î –≤–∏–±–æ—Ä—É - —Ü–µ —Ñ—ñ–Ω–∞–ª—å–Ω–∞ —Å—Ü–µ–Ω–∞
            self.root.after(2000, lambda: self.end_game(scene["text"]))  # –î–∞—î–º–æ —á–∞—Å –¥–æ—á–∏—Ç–∞—Ç–∏ —Å—Ü–µ–Ω—É
        else:
            for choice in scene["choices"]:
                btn = ttk.Button(self.choices_frame, text=choice["text"], 
                                 command=lambda ch=choice: self.make_choice(ch))
                btn.pack(fill="x", pady=3, padx=10)

        self.character_label.config(text=self.format_characteristics())

    def animate_text(self, text, index=0):
        """–ê–Ω—ñ–º–∞—Ü—ñ—è –ø–æ—Å—Ç—É–ø–æ–≤–æ–≥–æ –≤–∏–≤–µ–¥–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É"""
        if index == 0:
            self.text_label.config(text="")  # –û—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–¥ –≤–∏–≤–µ–¥–µ–Ω–Ω—è–º –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç—É

        if index < len(text):
            self.text_label.config(text=self.text_label["text"] + text[index])
            self.root.after(30, lambda: self.animate_text(text, index + 1))  # –®–≤–∏–¥–∫—ñ—Å—Ç—å –¥—Ä—É–∫—É
        else:
            return

    def make_choice(self, choice):
        """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –≥—Ä–∞–≤—Ü—è"""
        if "effect" in choice:
            for attr, value in choice["effect"].items():
                if attr in self.character:
                    self.character[attr] += value
    
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–¥–æ—Ä–æ–≤'—è –≤–ø–∞–ª–æ –¥–æ 0 –∞–±–æ –Ω–∏–∂—á–µ
        if self.character.get("health", 1) <= 0:
            messagebox.showinfo("–ì—Ä–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–∞", "–í–∏ –ø—Ä–æ–≥—Ä–∞–ª–∏! üíÄ")
            self.root.quit()
            return
    
        self.current_scene = choice["next_scene"]
    
        if not self.current_scene:
            self.end_game(self.data["scenes"][choice["next_scene"]]["text"])
        else:
            self.update_scene()

    def format_characteristics(self):
        """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≥–µ—Ä–æ—è"""
        formatted_text = f"üé≠ {self.player_name} ‚Äì –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n"
        for key, value in self.character.items():
            formatted_text += f"üîπ {key.capitalize()}: {value}\n"
        return formatted_text

    def end_game(self, final_text):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≥—Ä–∏: –ø–æ–∫–∞–∑ —Ñ—ñ–Ω–∞–ª—å–Ω–æ—ó —Å—Ü–µ–Ω–∏ —Ç–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫"""
        final_message = f"{final_text}\n\nüî• –§—ñ–Ω–∞–ª—å–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ {self.player_name}:\n{self.format_characteristics()}"
        messagebox.showinfo("–ö—ñ–Ω–µ—Ü—å –≥—Ä–∏", final_message)
        self.root.quit()  # –ó–∞–∫—Ä–∏—Ç—Ç—è –≥—Ä–∏

root = tk.Tk()
app = Game(root)
root.mainloop()
